{"version":3,"sources":["TodoContext/index.js","hooks/useLocalStorage.js","ConfirmDelete/index.js","CreateTodo/index.js","CreateTodoButton/index.js","TodoCounter/index.js","TodoItem/index.js","TodoList/index.js","TodoSearch/index.js","App/AppUI.js","App/index.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","key","initialValue","parsedKey","localStorageKey","localStorage","getItem","JSON","parse","setItem","stringify","useState","content","setContent","newContent","parsedContent","useLocalStorage","todos","setTodos","searchValue","setSearchValue","deleted","setDeleted","created","setCreated","indexTodo","setIndex","newTodo","setNewTodo","listTodos","filter","todo","title","includes","Provider","value","handleCompletedTodo","todoCompleted","map","id","completed","handleConfirmDelete","todoDelete","handleConfirmTodo","handleCreateTodo","length","handleDeleteTodo","confirm","children","ConfirmDelete","onDeletedTodo","useContext","className","onClick","CreateTodo","onConfirmTodo","onCreateTodo","onSubmit","e","preventDefault","htmlFor","onChange","target","type","placeholder","CreateTodoButton","name","TodoCounter","completedTodos","TodoItem","onCompletedTodo","onConfirmDelete","TodoList","TodoSearch","AppUI","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a8147b7.chunk.js","sourcesContent":["import { useState, createContext } from \"react\"\nimport { useLocalStorage } from '../hooks/useLocalStorage';\n\n\nconst TodoContext = createContext()\n\n\nconst TodoProvider = (props) => {\n    const [todos, setTodos] = useLocalStorage(\"TODOS_V1\", [])\n    const [searchValue, setSearchValue] = useState(\"\")\n    const [deleted, setDeleted] = useState(false)\n    const [created, setCreated] = useState(false)\n    const [indexTodo, setIndex] = useState(\"\")\n    const [newTodo, setNewTodo] = useState(\"\")\n\n\n    let listTodos = [...todos]\n\n    searchValue && (\n        listTodos = todos.filter(todo => (\n            todo.title.includes(searchValue)\n        ))\n\n    )\n\n    const handleCompletedTodo = (todoCompleted) => {\n        setTodos(todos.map(todo => {\n            if (todo.id === todoCompleted.id) {\n                return {\n                    ...todo,\n                    completed: !todo.completed,\n                }\n            } else {\n                return todo\n            }\n        }))\n    }\n\n    //----------------------Delete Todo---------------------\n    const handleConfirmDelete = (todoDelete) => {\n\n        deleted ? setDeleted(false) : setDeleted(true)\n        setIndex(todoDelete.id)\n    }\n\n    const handleDeleteTodo = (confirm) => {\n\n        if (confirm) {\n            setTodos(todos.filter(todo => todo.id !== indexTodo))\n        }\n\n        setDeleted(false)\n\n\n    }\n    //-----------------------------------------------------\n\n    //---------------------Create Todo---------------------\n\n    const handleConfirmTodo = () => {\n        created ? setCreated(false) : setCreated(true)\n    }\n\n    const handleCreateTodo = () => {\n        setTodos([\n            ...todos,\n            {\n                id: todos.length + 1,\n                title: newTodo,\n                completed: false\n            }\n        ])\n        setCreated(false)\n    }\n    //-----------------------------------------------------\n\n\n    return (\n        <TodoContext.Provider value={{\n            created,\n            deleted,\n            handleCompletedTodo,\n            handleConfirmDelete,\n            handleConfirmTodo,\n            handleCreateTodo,\n            handleDeleteTodo,\n            indexTodo,\n            listTodos,\n            searchValue,\n            setNewTodo,\n            setSearchValue,\n            setTodos,\n            todos\n\n        }} >\n            {props.children}\n        </TodoContext.Provider>\n    )\n}\n\nexport { TodoProvider, TodoContext }\n\n\n\n\n\n\n\n\n\n","import { useState } from \"react\"\n\nconst useLocalStorage = (key, initialValue) => {\n\n    const localStorageKey = localStorage.getItem(key)\n    let parsedKey;\n\n\n    if (!localStorageKey) {\n        localStorage.setItem(key, JSON.stringify(initialValue))\n        parsedKey = initialValue\n\n    } else {\n        parsedKey = JSON.parse(localStorageKey)\n    }\n\n    //State of content\n    const [content, setContent] = useState(parsedKey)\n\n    //saveContent receive a content. This content should convert to string with JSON.stringify\n    //After parsedContent was created, save the content in LocalStorage and setContent with the new Content\n\n    const saveContent = (newContent) => {\n\n        const parsedContent = JSON.stringify(newContent)\n        localStorage.setItem(key, parsedContent)\n        setContent(newContent)\n    }\n\n\n    return [\n        content,\n        saveContent,\n    ]\n}\n\nexport { useLocalStorage }","import { useContext } from \"react\"\nimport { TodoContext } from \"../TodoContext\"\nimport \"./ConfirmDelete.css\"\n\nconst ConfirmDelete = () => {\n\n    const { handleDeleteTodo: onDeletedTodo } = useContext(TodoContext)\n    return (\n        <div className=\"ConfirmDelete\">\n            <div className=\"confirm-container\">\n                <h4>Do you secure to delete this toDo?</h4>\n                <button\n                    className=\"confirmButton\"\n                    onClick={() => onDeletedTodo(true)}\n                >Yes\n                </button>\n                <button\n                    className=\"cancelButton\"\n                    onClick={() => onDeletedTodo(false)}\n                >No\n                </button>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport { ConfirmDelete }","import { useContext } from \"react\"\nimport { TodoContext } from \"../TodoContext\"\nimport \"./CreateTodo.css\"\n\nconst CreateTodo = () => {\n\n    const {\n        handleConfirmTodo: onConfirmTodo,\n        handleCreateTodo: onCreateTodo,\n        setNewTodo,\n    } = useContext(TodoContext)\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n\n    }\n\n    const handleChange = (e) => {\n        setNewTodo(e.target.value)\n    }\n\n    return (\n        <div className=\"CreateTodo\">\n            <form onSubmit={handleSubmit}>\n                <label\n                    htmlFor=\"todoInput\"\n                    className=\"title\">\n                    Create your To Do\n                </label>\n                <input\n                    id=\"todoInput\"\n                    className=\"todoInput\"\n                    onChange={handleChange}\n\n                    type=\"text\"\n                    placeholder=\"Create your To Do here ...\"\n                />\n                <div className=\"buttons\">\n                    <button\n                        className=\"buttons__cancel\"\n                        onClick={onConfirmTodo}\n                    >\n                        <span>Cancel</span>\n                    </button>\n                    <button\n                        className=\"buttons__add\"\n                        onClick={onCreateTodo}\n                    >\n                        <span>Add</span>\n                    </button>\n\n                </div>\n\n\n            </form>\n        </div>\n    )\n}\n\nexport { CreateTodo }","import { useContext } from \"react\"\nimport { TodoContext } from \"../TodoContext\"\nimport \"./CreateTodoButton.css\"\n\nconst CreateTodoButton = () => {\n\n    const { handleConfirmTodo: onCreateTodo } = useContext(TodoContext)\n\n    return (\n\n        <div className=\"CreateTodoButton\">\n            <button\n                onClick={onCreateTodo}\n            >\n                <ion-icon name=\"add-outline\"></ion-icon>\n            </button>\n\n        </div>\n\n\n    )\n}\n\nexport { CreateTodoButton }","import { useContext } from \"react\"\nimport { TodoContext } from \"../TodoContext\"\nimport \"./TodoCounter.css\"\n\nconst TodoCounter = () => {\n\n    const { todos } = useContext(TodoContext)\n\n    const completedTodos = todos.filter(todo => todo.completed)\n    return (\n        <main className=\"TodoCounter\">\n            <h2>You have completed {completedTodos.length} of {todos.length} ToDo's</h2>\n        </main>\n    )\n}\n\nexport { TodoCounter }","\nimport { useContext } from \"react\"\nimport { TodoContext } from \"../TodoContext\"\nimport \"./TodoItem.css\"\n\n\nconst TodoItem = ({ todo }) => {\n\n    const {\n\n        handleCompletedTodo: onCompletedTodo,\n        handleConfirmDelete: onConfirmDelete,\n\n    } = useContext(TodoContext)\n\n\n    return (\n        <>\n            <li className=\"TodoItem\" >\n                <button\n                    className={`uncompleted-Icon ${todo.completed && \"completed-Icon\"}`}\n                    onClick={() => onCompletedTodo(todo)}\n                >\n                    {\n                        todo.completed\n                            ? <ion-icon name=\"refresh-outline\"></ion-icon>\n                            : <ion-icon name=\"checkmark-circle-outline\"></ion-icon>\n                    }\n                </button >\n                <div\n                    className={`titleTodo ${todo.completed && \"completed\"}`}\n                >\n                    {todo.title}\n                </div>\n                <button\n                    className=\"deleteIcon\"\n                    onClick={() => onConfirmDelete(todo)}\n                >\n                    <ion-icon\n                        name=\"trash-outline\">\n                    </ion-icon>\n                </button>\n\n            </li>\n        </>\n    )\n}\n\nexport { TodoItem }","import \"./TodoList.css\"\n\nconst TodoList = ({ children }) => {\n    return (\n        <ul className=\"TodoList\">\n            {children}\n        </ul>\n    )\n}\n\nexport { TodoList }","//import { useState } from \"react\";\nimport { useContext } from \"react\"\nimport { TodoContext } from \"../TodoContext\"\nimport \"./TodoSearch.css\"\n\n\nconst TodoSearch = () => {\n\n    const { searchValue, setSearchValue } = useContext(TodoContext)\n\n    const handleChange = (e) => {\n\n        setSearchValue(e.target.value)\n    }\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n    }\n\n\n\n\n    return (\n        <div className=\"TodoSearch\">\n            <div className=\"search__title\">\n\n                <span>To Do</span>\n            </div>\n            <form onSubmit={handleSubmit}>\n                <label\n                    htmlFor=\"search\" className=\"search__input\"\n                >\n                    <ion-icon name=\"search-outline\"></ion-icon>\n                    <input\n                        id=\"search\"\n                        type=\"text\"\n                        value={searchValue}\n                        onChange={handleChange}\n                        placeholder=\"Search to do...\"\n                    ></input>\n                </label>\n\n            </form>\n            <div >\n\n\n            </div>\n        </div >\n    )\n}\n\nexport { TodoSearch }\n","import { useContext } from 'react';\nimport { ConfirmDelete } from '../ConfirmDelete';\nimport { CreateTodo } from '../CreateTodo';\nimport { CreateTodoButton } from '../CreateTodoButton';\nimport { TodoContext } from '../TodoContext';\nimport { TodoCounter } from '../TodoCounter';\nimport { TodoItem } from '../TodoItem';\nimport { TodoList } from '../TodoList';\nimport { TodoSearch } from '../TodoSearch';\n\nconst AppUI = () => {\n    const {\n        created,\n        deleted,\n        listTodos,\n    } = useContext(TodoContext)\n\n    return (\n        <div className=\"App\">\n            <TodoSearch />\n            <TodoCounter />\n\n            <TodoList >\n\n                {\n                    (listTodos.length > 0)\n                        ? (\n                            listTodos.map(todo => (\n                                <TodoItem\n                                    key={todo.id}\n                                    todo={todo}\n                                />\n\n                            ))\n                        )\n                        : (\n                            <h3>There aren't todos.<br /> Please create your To Do ...\n                            </h3>\n\n                        )\n                }\n\n            </TodoList>\n\n            <CreateTodoButton />\n\n            {deleted && <ConfirmDelete />}\n\n            {created && <CreateTodo />}\n\n        </div>\n    )\n}\n\nexport { AppUI }","import { TodoProvider } from '../TodoContext';\nimport './App.css';\nimport { AppUI } from './AppUI';\n\n\n\n\nconst App = () => {\n\n  return (\n    <TodoProvider>\n      <AppUI />\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}